// src/server.ts
import { APP_BASE_HREF } from '@angular/common';
import { ApplicationRef } from '@angular/core';
import { bootstrapApplication } from '@angular/platform-browser';
import {
  AngularNodeAppEngine,
  createNodeRequestHandler,
  isMainModule,
  writeResponseToNodeResponse,
} from '@angular/ssr/node';
import express from 'express';
import { fileURLToPath } from 'node:url';
import { dirname, join, resolve } from 'node:path';
import { renderApplication } from '@angular/platform-server';
import bootstrap from './main.server';
import { readFileSync } from 'node:fs';
// const serverDistFolder = dirname(fileURLToPath(import.meta.url));
// const browserDistFolder = resolve(serverDistFolder, '../browser');

// const app = express();
// const angularApp = new AngularNodeAppEngine();

/**
 * Example Express Rest API endpoints can be defined here.
 * Uncomment and define endpoints as necessary.
 *
 * Example:
 * ```ts
 * app.get('/api/**', (req, res) => {
 *   // Handle API request
 * });
 * ```
 */

/**
 * Serve static files from /browser
 */
// app.use(
//   express.static(browserDistFolder, {
//     maxAge: '1y',
//     index: false,
//     redirect: false,
//   }),
// );

// /**
//  * Handle all other requests by rendering the Angular application.
//  */
// app.use('/**', (req, res, next) => {
//   angularApp
//     .handle(req)
//     .then((response) =>
//       response ? writeResponseToNodeResponse(response, res) : next(),
//     )
//     .catch(next);
// });

// /**
//  * Start the server if this module is the main entry point.
//  * The server listens on the port defined by the `PORT` environment variable, or defaults to 4000.
//  */
// if (isMainModule(import.meta.url)) {
//   const port = process.env['PORT'] || 4000;
//   app.listen(port, () => {
//     console.log(`Node Express server listening on http://localhost:${port}`);
//   });
// }

// /**
//  * The request handler used by the Angular CLI (dev-server and during build).
//  */
// export const reqHandler = createNodeRequestHandler(app);



// Directory corrente
const __dirname = dirname(fileURLToPath(import.meta.url));

// Directory di distribuzione
// const distFolder = resolve(__dirname, '../dist/portfolio-app/browser');
const distFolder = resolve(__dirname, '../browser');

// const ssrDistFolder = resolve(__dirname, '../dist/portfolio-app/server');
const indexHtml = join(distFolder, 'index.html');

// Crea l'app Express
export function app(): express.Express {
  const server = express();
  // const indexHtml = join(distFolder, 'index.html');

  console.log('Server starting...');
  console.log('Serving static files from:', distFolder);

  server.set('view engine', 'html');
  server.set('views', distFolder);

  // Server dei file statici
  server.get('*.*', express.static(distFolder, {
    maxAge: '1y'
  }));

  // Tutte le richieste regolari vengono gestite qui
  server.get('*', async (req, res, next) => {
    console.log('Request received:', req.url);
    try {
      // Creiamo una nuova istanza del modulo server
      // const app = await bootstrap();
      const document = readFileSync(indexHtml, 'utf-8');
      const url = req.protocol + '://' + req.get('host') + req.originalUrl;

      const html = await renderApplication(bootstrap, {
        // document: await readFileSync(indexHtml, 'utf-8'),
        document,
        url,
        platformProviders: [
          { provide: APP_BASE_HREF, useValue: req.baseUrl }
        ]
      });

      res.send(html);
    } catch (err) {
      console.error('Error:', err);
      next(err);
    }
  });

  return server;
}

function run(): void {
  const port = process.env['PORT'] || 4000;

  // Avvia il server
  const server = app();
  server.listen(port, () => {
    console.log(`Node Express server listening on http://localhost:${port}`);
  });
}

// Start server if running directly
if (process.env['SSR']) {
  console.log('Starting server in SSR mode...');
  run();
}

export default run;
